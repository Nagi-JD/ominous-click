# üí∞ Syst√®me de Rewards: 20% des Dev Fees

## üéØ Concept

Au lieu de donner 1 SOL fixe au winner, on donne **20% de ce qui est accumul√© dans le pot** (dev fees collect√©es).

### Comment √ßa marche:

1. **Dev fees sont collect√©es** (√† chaque transaction de votre token)
2. **Le pot grandit** dans Supabase
3. **Toutes les 5 minutes**, le winner prend **20% du pot**
4. **Les 80% restants** continuent √† grandir

---

## üìä Structure √† cr√©er dans Supabase

### Table `pot`

```sql
CREATE TABLE pot (
  id SERIAL PRIMARY KEY,
  total_fees BIGINT DEFAULT 0,
  rounds_paid INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Ins√©rer le pot initial
INSERT INTO pot (total_fees) VALUES (0);
```

### Table `round_winners` (historique)

```sql
CREATE TABLE round_winners (
  id SERIAL PRIMARY KEY,
  address TEXT NOT NULL,
  total_clicks BIGINT NOT NULL,
  reward_amount BIGINT NOT NULL,
  round_start TIMESTAMP NOT NULL,
  round_end TIMESTAMP NOT NULL,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_round_end ON round_winners(round_end DESC);
```

---

## üîß Modifier `claim-round-winners.js`

```javascript
// R√©cup√©rer le pot actuel
const { data: pot, error: potError } = await supabase
  .from('pot')
  .select('total_fees')
  .single()

if (potError || !pot) {
  // Cr√©er le pot si n'existe pas
  await supabase.from('pot').insert({ total_fees: 0 })
  pot.total_fees = 0
}

// Calculer le reward (20% du pot)
const rewardAmount = Math.floor(pot.total_fees * 0.20) // 20%

// Enlever du pot
await supabase
  .from('pot')
  .update({ total_fees: pot.total_fees - rewardAmount })
  .eq('id', pot.id)

// Enregistrer le winner
await supabase.from('round_winners').insert({
  address: champion.address,
  total_clicks: champion.total_clicks,
  reward_amount: rewardAmount,
  round_start: roundStartTime,
  round_end: now
})

console.log('üèÜ Winner:', champion.address)
console.log('üí∞ Reward:', rewardAmount, 'SOL')
```

---

## üîÑ Pour incr√©menter le pot

√Ä chaque fois qu'une transaction a lieu avec votre token:

```javascript
// Dans votre backend de token
async function addDevFee(amount) {
  await supabase
    .from('pot')
    .update({ total_fees: supabase.raw('total_fees + ?', [amount]) })
    .eq('id', potId)
}
```

---

## üìà Avantages

‚úÖ **√âvolutif**: Plus il y a de volume, plus le reward grandit
‚úÖ **Juste**: 20% pour le winner, reste continue √† grossir
‚úÖ **Motivation**: Les joueurs veulent plus de clics pour gagner plus
‚úÖ **Sustainable**: Le pot ne se vide pas compl√®tement

---

## ‚ö†Ô∏è √Ä impl√©menter

1. Cr√©er la table `pot` dans Supabase
2. Cr√©er la table `round_winners`
3. Modifier `claim-round-winners.js` pour utiliser le pot
4. Impl√©menter l'incr√©mentation du pot (√† chaque transaction)

